# .github/workflows/ip-info.yml
name: Run ngrok version

on:
  workflow_dispatch:  # lets you trigger it manually from GitHub UI

jobs:
  show-ip:
    runs-on: ubuntu-22.04

    steps:
      - name: Show current user
        run: whoami
      - name: Show IP address info
        run: ip a
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up ngrok cache
        id: ngrok-cache
        uses: actions/cache@v4
        with:
          path: ~/.local/bin/ngrok
          key: ngrok-bin-v3

      - name: Download ngrok if not cached
        if: steps.ngrok-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/.local/bin
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok
          cp $(which ngrok) ~/.local/bin/ngrok

      - name: Add ngrok to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run ngrok version
        run: ngrok version

      - name: Install SSH server
        run: |
          sudo apt-get install -y openssh-server
          sudo mkdir -p /var/run/sshd

      - name: Set runner password
        run: echo "runner:simple1pass" | sudo chpasswd

      - name: Allow runner login with password
        run: |
          sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
          sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config

      - name: Install OpenVPN
        run: |
          sudo apt-get install -y openvpn easy-rsa wget unzip

      - name: Setup EasyRSA PKI
        run: |
          make-cadir ~/openvpn-ca
          cd ~/openvpn-ca
          echo 'set_var EASYRSA_REQ_CN "OpenVPN CA"' > vars
          ./easyrsa init-pki
          echo | ./easyrsa build-ca nopass
          ./easyrsa gen-dh
          ./easyrsa build-server-full server nopass
          ./easyrsa build-client-full client1 nopass
          openvpn --genkey --secret ta.key

      - name: Create server config
        run: |
          cat > ~/openvpn-ca/server.conf <<EOF
          port 1194
          proto tcp
          dev tun
          ca ~/openvpn-ca/pki/ca.crt
          cert ~/openvpn-ca/pki/issued/server.crt
          key ~/openvpn-ca/pki/private/server.key
          dh ~/openvpn-ca/pki/dh.pem
          tls-auth ~/openvpn-ca/ta.key 0
          cipher AES-256-CBC
          auth SHA256
          server 10.8.0.0 255.255.255.0
          keepalive 10 120
          persist-key
          persist-tun
          status openvpn-status.log
          verb 3
          EOF

      - name: Start OpenVPN server
        run: |
          sudo openvpn --config ~/openvpn-ca/server.conf --daemon

      - name: Start ngrok TCP tunnel
        env:
          NGROK_AUTHTOKEN: ${{ secrets.NGROK_AUTHTOKEN }}
        run: |
          ngrok authtoken $NGROK_AUTHTOKEN
          ngrok tcp 1194 --log=stdout > ngrok.log 2>&1 &
          sleep 10
          NGROK_TUNNEL=$(grep -oP 'tcp://\K[^ ]+' ngrok.log | head -1)
          echo "NGROK_TUNNEL=$NGROK_TUNNEL" >> $GITHUB_ENV

      - name: Show ngrok tunnel address
        run: |
          echo "OpenVPN is exposed at TCP address: $NGROK_TUNNEL"
      
      - name: Generate client config
        run: |
          CLIENT_CONFIG=~/openvpn-ca/client1.ovpn
          cat > $CLIENT_CONFIG <<EOF
          client
          dev tun
          proto tcp
          remote ${{ env.NGROK_TUNNEL }}
          resolv-retry infinite
          nobind
          persist-key
          persist-tun
          remote-cert-tls server
          cipher AES-256-CBC
          auth SHA256
          key-direction 1

          <ca>
          $(cat ~/openvpn-ca/pki/ca.crt)
          </ca>
          <cert>
          $(sed -n '/BEGIN CERTIFICATE/,/END CERTIFICATE/p' ~/openvpn-ca/pki/issued/client1.crt)
          </cert>
          <key>
          $(cat ~/openvpn-ca/pki/private/client1.key)
          </key>
          <tls-auth>
          $(cat ~/openvpn-ca/ta.key)
          </tls-auth>
          EOF

      - name: Upload client config as artifact
        uses: actions/upload-artifact@v4
        with:
          name: openvpn-client-config
          path: ~/openvpn-ca/client1.ovpn

      - name: Wait 120 sec to keep tunnel open
        run: sleep 120

